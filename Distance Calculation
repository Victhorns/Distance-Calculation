<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Distance Calculation App</title>
  <link rel="stylesheet" href="./style.css"/>
</head>
<body>
  <div class="container">
    <h1>Distance Calculation App</h1>

    <div>
      <label for="origin">Starting Point:</label>
      <input type="text" id="origin" placeholder="Enter starting point (e.g., City, Province)">
    </div>

    <div>
      <label for="destination">Destination:</label>
      <input type="text" id="destination" placeholder="Enter destination (e.g., City, Province)">
    </div>

    <button onclick="calculateDistance()">Calculate Distance</button>

    <div id="travelModes">
      <h3>Select Travel Mode:</h3>
      <button onclick="setTravelMode('DRIVING')">Driving</button>
      <button onclick="setTravelMode('WALKING')">Walking</button>
      <button onclick="setTravelMode('TRANSIT')">Transit</button>
    </div>

    <div id="results"></div>
  </div>

  <div id="map"></div>
  
  <script>
    let map;
    let service;
    let infowindow;
    let currentTravelMode = 'DRIVING';  // Default travel mode is DRIVING
    let directionsRenderer;  // To render the directions on the map

    function initMap() {
      // Initialize map centered at a default location
      map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: 14.60420000, lng: 120.98220000 },  // Default location: Manila
        zoom: 10
      });

      infowindow = new google.maps.InfoWindow();
      service = new google.maps.DistanceMatrixService();
      
      // Initialize the DirectionsRenderer object
      directionsRenderer = new google.maps.DirectionsRenderer({
        map: map,
      });
    }

    function setTravelMode(mode) {
      currentTravelMode = mode;
      alert(`Travel mode set to: ${mode}`);

      // Clear previous directions when the travel mode changes
      directionsRenderer.setDirections({ routes: [] });
    }

    function calculateDistance() {
      const origin = document.getElementById('origin').value;
      const destination = document.getElementById('destination').value;

      // Check if both origin and destination are provided
      if (!origin || !destination) {
        alert('Please enter both the starting point and destination');
        return;
      }

      // Use the Distance Matrix API to calculate the distance
      service.getDistanceMatrix(
        {
          origins: [origin],
          destinations: [destination],
          travelMode: google.maps.TravelMode[currentTravelMode],  // Use the selected travel mode
        }, callback);
    }

    function callback(response, status) {
      if (status === 'OK') {
        const results = response.rows[0].elements[0];

        // Display distance and duration
        const distance = results.distance.text;
        const duration = results.duration.text;

        document.getElementById('results').innerHTML = `
          <h3>Distance and Duration:</h3>
          <p>Distance: ${distance}</p>
          <p>Duration: ${duration}</p>
        `;

        // Display the route on the map with the current travel mode
        const directionsService = new google.maps.DirectionsService();
        
        const request = {
          origin: document.getElementById('origin').value,
          destination: document.getElementById('destination').value,
          travelMode: google.maps.TravelMode[currentTravelMode], // Use the selected travel mode
        };

        directionsService.route(request, (result, status) => {
          if (status === 'OK') {
            directionsRenderer.setDirections(result);
          }
        });
      } else {
        alert('Distance calculation failed due to: ' + status);
      }
    }

    // Load Google Maps API asynchronously with callback
    function loadScript() {
      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBU4okr3fkCeff374l1NeSBB3Ib9GnMRec&libraries=places&callback=initMap`;
      script.async = true;
      script.defer = true;
      document.head.appendChild(script);
    }

    loadScript();  // Load the Google Maps API when the page loads
  </script>

</body>
</html>



----------------------------# style.css #---------------------------------




/* Add a smooth RGB gradient wave animation */
@keyframes rgbWaveBackground {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
  
  body {
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    height: 100vh;
    margin: 0;
    background: linear-gradient(45deg, rgb(255, 0, 0), rgb(0, 255, 0), rgb(0, 0, 255), rgb(255, 255, 0), rgb(255, 0, 255));
    background-size: 400% 400%;  /* Ensures smooth and large transition */
    animation: rgbWaveBackground 10s ease infinite;  /* Applying wave animation */
  }
  
  .container {
    text-align: center;
    width: 100%;
    max-width: 500px;
    padding: 20px;
    background-color: rgb(255, 255, 255);  /* White background for the form container */
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    margin: 20px 0;  /* Space between the form and map */
    flex: 1;  /* Allow container to take up available space */
    display: flex;
    flex-direction: column;
    align-items: center;  /* Center content horizontally */
    align-self: center; /* Center container horizontally */
  }
  
  h1 {
    margin-bottom: 20px;
    color: rgb(50, 50, 50);  /* Dark gray color for the header */
  }
  
  div {
    margin-bottom: 15px;
    display: flex;
    align-items: center;  /* Align label and input field vertically */
    justify-content: center; /* Center horizontally */
  }
  
  div label {
    margin-right: 10px;  /* Space between label and input field */
    font-size: 16px;
  }
  
  input {
    padding: 8px;
    width: 60%;  /* Make the input fields smaller */
    margin-top: 5px;
    border-radius: 4px;
    border: 1px solid #ccc;
  }
  
  button {
    padding: 6px 12px;  /* Reduced padding for a smaller button */
    font-size: 14px;     /* Smaller font size */
    margin-top: 10px;
    width: 150px;        /* Fixed width for the button */
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #45a049;
  }
  
  #travelModes {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
  }
  
  #travelModes h3 {
    margin-right: 20px; /* Add space between the text and the buttons */
    margin-bottom: 0;   /* Remove any margin below the text */
    color: rgb(50, 50, 50); /* Dark gray color for the text */
  }
  
  #map {
    height: 50vh; /* The map will cover the bottom half of the screen */
    width: 100%;
    background-color: rgb(220, 220, 220); /* Slight gray background for the map area */
  }
  
  #results {
    margin-top: 20px;
  }
  
